<!-- ===========================================
     Sign Up View
     ===========================================
     This file serves as the home page of the web dashboard.
     Key actions:
     1. Include the necessary layout and partials.
     2. Display real-time data and user interactions.
     3. Ensure the page is styled consistently with the overall design.
     ===========================================
-->
<!-- Use the boilerplate layout for consistent structure it will retrieve the layout of the boilerplate file -->
<% layout('layouts/boilerplate') %>

<link rel="stylesheet" href="/stylesheets/auth.css">

<div class="container">
  <div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
      <div class="card shadow">
        <div class="card-body p-5">
          <h2 class="text-center mb-4">Sign Up</h2>
          
          <!-- Alert for error messages -->
          <% if (typeof error !== 'undefined') { %>
            <div class="alert alert-danger" role="alert">
              <%= error %>
            </div>
          <% } %>

          <!-- Registration Form -->
          <form action="/auth/register" method="POST" id="registrationForm">
            <!-- Email Input -->
            <div class="mb-3">
              <label for="email" class="form-label">Email address</label>
              <input 
                type="email" 
                class="form-control" 
                id="email" 
                name="email" 
                required
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
              >
            </div>

            <!-- Password Input -->
            <div class="mb-3">
              <label for="password" class="form-label">Password</label>
              <input 
                type="password" 
                class="form-control" 
                id="password" 
                name="password" 
                required
                minlength="6"
              >
            </div>

            <!-- Confirm Password Input -->
            <div class="mb-3">
              <label for="confirmPassword" class="form-label">Confirm Password</label>
              <input 
                type="password" 
                class="form-control" 
                id="confirmPassword" 
                name="confirmPassword" 
                required
                minlength="6"
              >
            </div>

            <!-- Terms Checkbox -->
            <div class="mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="terms" required>
              <label class="form-check-label" for="terms">I agree to the Terms and Conditions</label>
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary w-100">Sign Up</button>
          </form>

          <!-- Additional Links -->
          <div class="mt-3 text-center">
            Already have an account? <a href="/login" class="text-decoration-none">Sign in</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.getElementById('registrationForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;
  const confirmPassword = document.getElementById('confirmPassword').value;
  
  // Password confirmation check
  if (password !== confirmPassword) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger alert-dismissible fade show';
    errorDiv.role = 'alert';
    errorDiv.innerHTML = `
      Passwords do not match
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    const form = document.getElementById('registrationForm');
    form.insertAdjacentElement('beforebegin', errorDiv);
    return;
  }

  try {
    const response = await fetch('/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password })
    });

    if (response.ok) {
      window.location.href = '/dashboard';
    } else {
      const data = await response.json();
      const errorDiv = document.createElement('div');
      errorDiv.className = 'alert alert-danger alert-dismissible fade show';
      errorDiv.role = 'alert';
      errorDiv.innerHTML = `
        ${data.message || 'An error occurred during registration.'}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      
      const existingError = document.querySelector('.alert');
      if (existingError) {
        existingError.remove();
      }
      
      const form = document.getElementById('registrationForm');
      form.insertAdjacentElement('beforebegin', errorDiv);
    }
  } catch (error) {
    console.error('Registration error:', error);
    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger alert-dismissible fade show';
    errorDiv.role = 'alert';
    errorDiv.innerHTML = `
      Network error. Please try again later.
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    const existingError = document.querySelector('.alert');
    if (existingError) {
      existingError.remove();
    }
    
    const form = document.getElementById('registrationForm');
    form.insertAdjacentElement('beforebegin', errorDiv);
  }
});

// Add password visibility toggle for both password fields
document.addEventListener('DOMContentLoaded', function() {
  const passwordFields = ['password', 'confirmPassword'];
  
  passwordFields.forEach(fieldId => {
    const passwordInput = document.getElementById(fieldId);
    const togglePassword = document.createElement('button');
    togglePassword.type = 'button';
    togglePassword.className = 'btn btn-outline-secondary position-absolute  end-0 bottom-0';
    togglePassword.innerHTML = '<i class="fas fa-eye"></i>';
    togglePassword.style.right = '10px';
    togglePassword.style.zIndex = '10';
    
    passwordInput.parentElement.style.position = 'relative';
    passwordInput.parentElement.appendChild(togglePassword);
    
    togglePassword.addEventListener('click', function() {
      const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordInput.setAttribute('type', type);
      this.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
    });
  });
});
</script>